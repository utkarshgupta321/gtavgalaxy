
const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const crypto = require('crypto');
const connection = require('../db');
const nodemailer = require('nodemailer');


// Setup Nodemailer with Gmail SMTP
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,  // Your Gmail address
    pass: process.env.EMAIL_PASS,  // The app password generated by Google
  },
  tls: {
    rejectUnauthorized: false,   // This disables certificate validation
  },
});

// Signup
router.post('/signup', async (req, res) => {
  const { username, email, password } = req.body;
  const hashed = await bcrypt.hash(password, 10);
  const token = crypto.randomBytes(32).toString('hex');

  connection.query('INSERT INTO users SET ?', {
    username, email, password: hashed, verify_token: token, is_admin: 0
  }, (err) => {
    if (err) return res.status(500).send('Signup failed');

    // Send verification email
    const msg = {
      to: email,
      from: process.env.EMAIL_USER,  // Sender's Gmail address
      subject: 'Verify your account',
      text: `Please verify your account by clicking on the link below:\n\nhttp://localhost:3000/verify?token=${token}`,
    };

    // Send the email using Nodemailer
    transporter.sendMail(msg, (error, info) => {
      if (error) {
        console.error('Error sending email', error);
        return res.status(500).send('Failed to send verification email');
      }
      console.log('Verification email sent:', info.response);
      res.send('Check your email to verify your account');
    });
  });
});



// Verify Email
router.get('/verify', (req, res) => {
  const { token } = req.query;
  connection.query('UPDATE users SET verified = 1 WHERE verify_token = ?', [token], (err) => {
    if (err) return res.status(500).sendFile(path.join(__dirname, '../public/verify-failed.html'));
    res.sendFile(path.join(__dirname, '../public/verify-success.html'));
  });
});

// Login
router.post('/login', (req, res) => {
  const { email, password } = req.body;
  connection.query('SELECT * FROM users WHERE email = ?', [email], async (err, results) => {
    if (err || results.length === 0) return res.status(400).send('Invalid email or password');
    const match = await bcrypt.compare(password, results[0].password);
    if (!match) return res.status(400).send('Invalid email or password');

    if (!results[0].verified) return res.status(403).send('Please verify your email first.');
    req.session.user = results[0];

    const user = results[0];
    req.session.user = {
      id: user.id,
      username: user.username,
      is_admin: user.is_admin
    };

    console.log('Session set on login:', req.session.user);

    if (user.is_admin) {
      console.log('Admin logged in:', user);
      // Redirect to the admin page (ensure this is the last response)
      return res.json({ redirect: user.is_admin ? '/admin.html' : '/home.html' });
    }

    res.send('Login successful');
  });
});

// Forgot Password
router.post('/forgot-password', (req, res) => {
  const { email } = req.body;
  const token = crypto.randomBytes(32).toString('hex');
  connection.query('UPDATE users SET reset_token = ? WHERE email = ?', [token, email], (err) => {
    if (err) return res.status(500).send('Failed');

    transporter.sendMail({
      to: email,
      subject: 'Password Reset',
      html: `<a href="http://localhost:3000/reset-password.html?token=${token}">Reset Password</a>`
    });

    res.send('Password reset link sent to your email');
  });
});


const path = require('path');

// Reset Password - GET route (serve static HTML)
router.get('/reset-password', (req, res) => {
  const { token } = req.query;

  if (!token) {
    return res.status(400).send('Token is required.');
  }

  res.sendFile(path.join(__dirname, '..', 'public', 'reset-password.html'));
});

// Reset Password - POST route (submit new password)
router.post('/reset-password', async (req, res) => {
  const { token, newPassword } = req.body;

  if (!token || !newPassword) {
    return res.status(400).send('Token and new password are required.');
  }

  // Hash the new password before storing it
  const hashed = await bcrypt.hash(newPassword, 10);

  // Update the password in the database for the user with the provided reset token
  connection.query('UPDATE users SET password = ?, reset_token = NULL WHERE reset_token = ?', [hashed, token], (err, results) => {
    if (err || results.affectedRows === 0) {
      return res.status(500).send('Password reset failed. Invalid token or error.');
    }
    
    res.send('Password reset successful. You can now log in.');
  });
});


module.exports = router;
